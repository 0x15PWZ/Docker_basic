
‚úÖ Day 12 - Dockerizing Django or Flask + PostgreSQL App
_______________________________________________

üß† ·Ä°·Äì·Ä≠·ÄÄ·Äû·Ä≠·Äë·Ä¨·Ä∏·Äõ·Äô·Äö·Ä∑·Ä∫ ·Ä°·ÄÄ·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Ä°·Äõ·Ä¨·Äô·Äª·Ä¨·Ä∏
Django (·Äû·Ä≠·ÄØ·Ä∑) Flask app ·ÄÄ·Ä≠·ÄØ PostgreSQL database ·Äî·Ä≤·Ä∑·ÄÅ·Äª·Ä≠·Äê·Ä∫·Äï·Äº·ÄÆ·Ä∏ Dockerize ·Äú·ÄØ·Äï·Ä∫·Äê·Äê·Ä∫·Äñ·Ä≠·ÄØ·Ä∑
docker-compose.yml ·Äñ·Äº·ÄÑ·Ä∑·Ä∫ multi-container app ·Äê·Ää·Ä∫·ÄÜ·Ä±·Ä¨·ÄÄ·Ä∫·Äê·Äê·Ä∫·Äñ·Ä≠·ÄØ·Ä∑
Environment variables ·Äî·Ä≤·Ä∑ .env ·Äñ·Ä≠·ÄØ·ÄÑ·Ä∫·ÄÄ·Ä≠·ÄØ·Äú·Ää·Ä∫·Ä∏ ·Äë·Ää·Ä∑·Ä∫·Äû·ÄØ·Ä∂·Ä∏·Äê·Äê·Ä∫·Äñ·Ä≠·ÄØ·Ä∑

üì¶ Project Structure
__________________
django-postgres-app/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ docker-compose.yml

‚úÖ Step-by-Step (Using Django Example)
_________________________________________
Step 1: Create Django Project

mkdir django-postgres-app && cd django-postgres-app
python3 -m venv venv
source venv/bin/activate
pip install django psycopg2-binary
django-admin startproject myproject backend/myproject
pip freeze > backend/requirements.txt

Step 2: Dockerfile (in backend/ folder)

# backend/Dockerfile
FROM python:3.10-slim

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /code
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .

Step 3: .env file (in root project folder)


POSTGRES_DB=devdb
POSTGRES_USER=devuser
POSTGRES_PASSWORD=devpass

Step 4: docker-compose.yml

version: "3.9"
services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  
  web:
    build: ./backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/code
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db

volumes:
  postgres_data:
  
Step 5: Update Django Settings

In backend/myproject/settings.py ‚Üí DATABASES section:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("POSTGRES_DB"),
        'USER': os.getenv("POSTGRES_USER"),
        'PASSWORD': os.getenv("POSTGRES_PASSWORD"),
        'HOST': 'db',
        'PORT': 5432,
    }
}

Step 6: Build & Run

docker-compose up --build

Step 7: Run Migrations

Open a new terminal:

docker-compose exec web python manage.py migrate
Then visit:
‚û°Ô∏è http://localhost:8000

üí° Flask Alternative

For Flask + PostgreSQL, similar steps apply:
Install psycopg2 or SQLAlchemy

Configure DB URL: postgresql://user:pass@db:5432/dbname

üéØ Mini Project Tasks
______________________
Task	Description
_______________________________________________
‚úÖ	Django/Flask App created
‚úÖ	Connected to PostgreSQL
‚úÖ	Dockerized using Dockerfile
‚úÖ	Multi-container using docker-compose
‚úÖ	.env used for secrets & settings

===============================================================================//
